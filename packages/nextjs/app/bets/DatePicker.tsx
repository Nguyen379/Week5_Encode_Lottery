/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/oOV5v2Td0wS
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { useState } from "react";
import { Button } from "~~/components/ui/button";
import { Calendar } from "~~/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "~~/components/ui/popover";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "~~/components/ui/select";

export default function DatePicker({ onSubmit, label }) {
  const [date, setDate] = useState<Date>();
  const [hours, setHours] = useState<number>();
  const [minutes, setMinutes] = useState<number>();

  function handleSubmit() {
    const fullDate = new Date(date.setHours(hours, minutes));
    onSubmit(fullDate);
  }

  return (
    <div className="bg-background rounded-lg border p-6 w-full max-w-md">
      <div className="grid gap-4">
        <div className="flex items-center justify-between">
          <CalendarDaysIcon className="w-5 h-5" />
          <h2 className="text-lg font-semibold">Select closing time</h2>
        </div>
        <div className="grid gap-4">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="flex items-center justify-between w-full">
                <div className="flex items-center gap-2">
                  <CalendarDaysIcon className="w-5 h-5" />
                  <span>{date ? date.toLocaleDateString() : `Select Date`}</span>
                </div>
                <ChevronDownIcon className="w-5 h-5" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="p-0 max-w-[276px]">
              <Calendar initialFocus mode="single" defaultMonth={date?.from} selected={date} onSelect={setDate} />
            </PopoverContent>
          </Popover>
          <div className="grid grid-cols-2 gap-4">
            <Select onValueChange={value => setHours(Number(value))}>
              <SelectTrigger className="h-auto">
                <SelectValue
                  placeholder={
                    <div className="flex flex-col items-start">
                      <span className="font-semibold uppercase text-[0.65rem]">Hour</span>
                      <span className="font-normal">10</span>
                    </div>
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {Array.from({ length: 24 }, (_, i) => (
                  <SelectItem key={i} value={i}>
                    {i}
                  </SelectItem>
                ))}
                <span>:</span>
              </SelectContent>
            </Select>
            <Select onValueChange={value => setMinutes(Number(value))}>
              <SelectTrigger className="h-auto">
                <SelectValue
                  placeholder={
                    <div className="flex flex-col items-start">
                      <span className="font-semibold uppercase text-[0.65rem]">Minute</span>
                      <span className="font-normal">30</span>
                    </div>
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {Array.from({ length: 60 }, (_, i) => (
                  <SelectItem key={i} value={i}>
                    {i}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <button
          disabled={date === undefined || hours === undefined || minutes === undefined}
          onClick={handleSubmit}
          className="btn btn-primary w-full"
        >
          {label}
        </button>
      </div>
    </div>
  );
}

function CalendarDaysIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
      <path d="M8 14h.01" />
      <path d="M12 14h.01" />
      <path d="M16 14h.01" />
      <path d="M8 18h.01" />
      <path d="M12 18h.01" />
      <path d="M16 18h.01" />
    </svg>
  );
}

function ChevronDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  );
}
